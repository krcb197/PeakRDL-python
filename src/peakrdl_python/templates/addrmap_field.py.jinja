{#
peakrdl-python is a tool to generate Python Register Access Layer (RAL) from SystemRDL
Copyright (C) 2021 - 2023

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
#}

{% from 'addrmap_udp_property.py.jinja' import udp_property with context %}
{% from 'addrmap_universal_property.py.jinja' import universal_properties with context %}

{%- macro field_class(node) %}
    {% if node.is_sw_readable and node.is_sw_writable %}
class {{get_fully_qualified_type_name(node)}}_cls(Field{%- if 'encode' in node.list_properties() -%}Enum{% endif %}{% if asyncoutput %}Async{% endif %}ReadWrite):
    {% elif node.is_sw_readable and not node.is_sw_writable %}
class {{get_fully_qualified_type_name(node)}}_cls(Field{%- if 'encode' in node.list_properties() -%}Enum{% endif %}{% if asyncoutput %}Async{% endif %}ReadOnly):
    {% elif not node.is_sw_readable and node.is_sw_writable %}
class {{get_fully_qualified_type_name(node)}}_cls(Field{%- if 'encode' in node.list_properties() -%}Enum{% endif %}{% if asyncoutput %}Async{% endif %}WriteOnly):
    {% endif %}
    """
    Class to represent a register field in the register model

    {{get_table_block(node) | indent}}
    """

        {%- if 'encode' in node.list_properties() %}
        {%- set enumcls_name = get_fully_qualified_enum_type(node.get_property('encode'), top_node.parent, node, hide_node_func) + '_enumcls' %}
    __enum_cls = {{enumcls_name}}
        {% endif %}

    __slots__ : list[str] = []

    {%- if 'encode' in node.list_properties() %}
    @property
    def enum_cls(self) -> type[{{enumcls_name}}]:
        """
        The enumeration class for this field
        """
        return self.__enum_cls

        {% if node.is_sw_readable %}
    def decode_read_value(self, value: int) -> {{enumcls_name}}:  #type: ignore[override]
        """
        extracts the field value from a register value, by applying the bit
        mask and shift needed and conversion to the enum associated with the
        field

        Args:
            value: value to decode, normally read from a register

        Returns:
            field value

        Raises:
            ValueError - if the value read back for the field can not be matched to the enum
        """
        field_value = super().decode_read_value(value)
        if field_value not in self._enum_values:
            raise ValueError(f'{field_value:X} is not legal for the enumeration')

        return self.enum_cls(field_value)

    {% if asyncoutput %}async {% endif %}def read(self) -> {{enumcls_name}}: #type: ignore[override]
        """
        read the register and then perform the necessary actions, to report the
        value as the enumeration including:

        * application of bit mask
        * bit shifting
        * converting integer value to enum

        Returns:
            field value
        """
        reg_value = {% if asyncoutput %}await {% endif %}self.parent_register.read()
        return self.decode_read_value(reg_value)
            {% endif %}

        {% if node.is_sw_writable %}
    def encode_write_value(self, value: {{enumcls_name}}) -> int: # type: ignore[override]

        if not isinstance(value, self.enum_cls):
            raise TypeError('value must be an {{enumcls_name}} but got %s' % type(value))

        return super().encode_write_value(value.value)

    {% if asyncoutput %}async {% endif %}def write(self, value : {{enumcls_name}}) -> None: # type: ignore[override]

        if not isinstance(value, self.enum_cls):
            raise TypeError('value must be an {{enumcls_name}} but got %s' % type(value))

        {% if asyncoutput %}await {% endif %}super().write(value.value)
        {% endif %}

    @property
    def default(self) -> Optional[{{enumcls_name}}]:  #type: ignore[override]
        """
        The default enumerated value of the field

        This returns None:
        - if the field is not reset.
        - if the register resets to a signal value that can not be determined
        """
        int_default = super().default

        if int_default is not None:
            if int_default in self._enum_values:
                return {{enumcls_name}}(int_default)
            else:
                msg = f'reset value {int_default:d} is not within the enumeration for the class'
                self._logger.warning(msg)
                warnings.warn(msg)
                return None

        return None
    {% endif %}

    {{ udp_property(node) }}

    {{ universal_properties(node) }}

{%- endmacro -%}
