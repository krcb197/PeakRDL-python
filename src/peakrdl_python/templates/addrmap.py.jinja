{#
peakrdl-python is a tool to generate Python Register Access Layer (RAL) from SystemRDL
Copyright (C) 2021 - 2023

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
#}

{% include "header.py.jinja" with context %}
{% if uses_enum %}
from enum import EnumMeta
{% endif %}
{% if legacy_enum_type %}
from enum import IntEnum
{% endif %}
from enum import unique
from typing import Iterator
from typing import Optional
from typing import Union
from typing import Type
{% if asyncoutput -%}
from typing import AsyncGenerator
{% else %}
from typing import Generator
{% endif %}
import warnings
{% if legacy_block_access %}from array import array as Array{% endif %}


from contextlib import {% if asyncoutput %}async{% endif %}contextmanager

from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import Node
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import UDPStruct

from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib  import AddressMapArray, RegFileArray
{% if asyncoutput -%}
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import AsyncMemory, AsyncMemoryArray
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import AsyncAddressMap
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import AsyncRegFile
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib  import AsyncAddressMapArray
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib  import AsyncRegFileArray
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import MemoryAsyncReadOnly{% if legacy_block_access %}Legacy{% endif %}, MemoryAsyncWriteOnly{% if legacy_block_access %}Legacy{% endif %}, MemoryAsyncReadWrite{% if legacy_block_access %}Legacy{% endif %}
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import MemoryAsyncReadOnlyArray, MemoryAsyncWriteOnlyArray, MemoryAsyncReadWriteArray
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import AsyncReg, AsyncRegArray
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import RegAsyncReadOnly, RegAsyncWriteOnly, RegAsyncReadWrite
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import RegAsyncReadOnlyArray, RegAsyncWriteOnlyArray, RegAsyncReadWriteArray
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import FieldAsyncReadOnly, FieldAsyncWriteOnly, FieldAsyncReadWrite, Field
{% if uses_enum %}from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import FieldEnumAsyncReadOnly, FieldEnumAsyncWriteOnly, FieldEnumAsyncReadWrite{% endif %}
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import ReadableAsyncRegister, WritableAsyncRegister
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import ReadableAsyncMemory{% if legacy_block_access %}Legacy{% endif %}, WritableAsyncMemory{% if legacy_block_access %}Legacy{% endif %}
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import ReadableAsyncRegisterArray, WriteableAsyncRegisterArray
{%- else -%}
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import Memory, MemoryArray
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import AddressMap
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import RegFile
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib  import AddressMapArray
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib  import RegFileArray
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import MemoryReadOnly{% if legacy_block_access %}Legacy{% endif %}, MemoryWriteOnly{% if legacy_block_access %}Legacy{% endif %}, MemoryReadWrite{% if legacy_block_access %}Legacy{% endif %}
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import MemoryReadOnlyArray, MemoryWriteOnlyArray, MemoryReadWriteArray
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import Reg, RegArray
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import RegReadOnly, RegWriteOnly, RegReadWrite
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import RegReadOnlyArray, RegWriteOnlyArray, RegReadWriteArray
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import FieldReadOnly, FieldWriteOnly, FieldReadWrite, Field
{% if uses_enum %}from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import FieldEnumReadOnly, FieldEnumWriteOnly, FieldEnumReadWrite{% endif %}
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import ReadableRegister, WritableRegister
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import ReadableMemory{% if legacy_block_access %}Legacy{% endif %}, WritableMemory{% if legacy_block_access %}Legacy{% endif %}
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import ReadableRegisterArray, WriteableRegisterArray
{%- endif %}
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import FieldSizeProps, FieldMiscProps

{% if not legacy_enum_type %}
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import SystemRDLEnum, SystemRDLEnumEntry
{% endif %}

{% if asyncoutput %}
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import AsyncCallbackSet, AsyncCallbackSetLegacy
{% else %}
from {% if skip_lib_copy %}peakrdl_python.{% else %}..{% endif %}lib import NormalCallbackSet, NormalCallbackSetLegacy
{% endif %}


{% from 'addrmap_field.py.jinja' import field_class with context %}
{% from 'addrmap_register.py.jinja' import register_class with context %}
{% from 'addrmap_memory.py.jinja' import memory_class with context %}
{% from 'reg_definitions.py.jinja' import register_class_attributes with context %}
{% from 'reg_definitions.py.jinja' import child_register_getter with context %}
{% from 'addrmap_udp_property.py.jinja' import udp_property with context %}
{% from 'addrmap_universal_property.py.jinja' import universal_properties with context %}

{%- macro regfile_or_addr_instance(node) %}
    {%- if not hide_node_func(node) %}
    {%- if isinstance(node, systemrdlRegNode) %}
        {{ register_class_attributes(node) }}
    {%- elif isinstance(node, systemrdlMemNode) %}
        {%- if node.is_array %}
    self.__{{node.inst_name}}:{{get_fully_qualified_type_name(node)}}_array_cls = {{get_fully_qualified_type_name(node)}}_array_cls(address=self.address+{{node.raw_address_offset}},
                                                                                  stride={{node.array_stride}},
                                                                                  dimensions=tuple({{node.array_dimensions}}),
                                                                                  logger_handle=logger_handle+'.{{node.inst_name}}',
                                                                                  inst_name='{{node.inst_name}}', parent=self)
        {%- else %}
            {%- if node.is_sw_readable and node.is_sw_writable %}
    self.__{{node.inst_name}}:{{get_fully_qualified_type_name(node)}}_cls = {{get_fully_qualified_type_name(node)}}_cls(
                                                                 address=self.address+{{node.address_offset}},
                                                                 logger_handle=logger_handle+'.{{node.inst_name}}',
                                                                                   inst_name='{{node.inst_name}}', parent=self)
            {%- elif node.is_sw_readable and not node.is_sw_writable %}
    self.__{{node.inst_name}}:{{get_fully_qualified_type_name(node)}}_cls = {{get_fully_qualified_type_name(node)}}_cls(
                                                                 address=self.address+{{node.address_offset}},
                                                                 logger_handle=logger_handle+'.{{node.inst_name}}',
                                                                                   inst_name='{{node.inst_name}}', parent=self)
            {%- elif not node.is_sw_readable and node.is_sw_writable %}
    self.__{{node.inst_name}}:{{get_fully_qualified_type_name(node)}}_cls = {{get_fully_qualified_type_name(node)}}_cls(
                                                                             address=self.address+{{node.address_offset}},
                                                                             logger_handle=logger_handle+'.{{node.inst_name}}',
                                                                             inst_name='{{node.inst_name}}', parent=self)
            {%- endif %}
        {%- endif %}
    {%- elif isinstance(node, systemrdlRegfileNode) or isinstance(node, systemrdlAddrmapNode) %}
        {%- if node.is_array %}
    self.__{{node.inst_name}}:{{get_fully_qualified_type_name(node)}}_array_cls = {{get_fully_qualified_type_name(node)}}_array_cls(address=self.address+{{node.raw_address_offset}},
                                                                                  stride={{node.array_stride}},
                                                                                  dimensions=tuple({{node.array_dimensions}}),
                                                                                  logger_handle=logger_handle+'.{{node.inst_name}}',
                                                                                  inst_name='{{node.inst_name}}', parent=self)
        {%- else -%}
    self.__{{node.inst_name}}:{{get_fully_qualified_type_name(node)}}_cls = {{get_fully_qualified_type_name(node)}}_cls(
                                                                            address=self.address+{{node.address_offset}},
                                                                            logger_handle=logger_handle+'.{{node.inst_name}}',
                                                                            inst_name='{{node.inst_name}}',
                                                                            parent=self)
        {%- endif %}
    {%- endif %}
    {%- endif %}
{%- endmacro %}

{%- macro regfile_class(node) %}
class {{get_fully_qualified_type_name(node)}}_cls({% if asyncoutput %}Async{% endif %}RegFile):
    """
    Class to represent a register file in the register model

    {{get_table_block(node) | indent}}
    """

    __slots__ : list[str] = [{%- for child_node in node.children(unroll=False) -%}'__{{child_node.inst_name}}'{% if not loop.last %}, {% endif %}{%- endfor %}]

    {% if asyncoutput %}AsyncCallbackSet{% else %}NormalCallbackSet{% endif %}

    def __init__(self,
                 address: int,
                 logger_handle:str,
                 inst_name:str,
                 parent:Union[{% if asyncoutput %}Async{% endif %}AddressMap,{% if asyncoutput %}Async{% endif %}RegFile]):

        super().__init__(address=address,
                         logger_handle=logger_handle,
                         inst_name=inst_name,
                         parent=parent)

        # instance of objects within the class
        {% for child_node in node.children(unroll=False) -%}
            {{ regfile_or_addr_instance(child_node) | indent }}
        {% endfor %}

    @property
    def size(self) -> int:
        return {{node.size}}

    # properties for Register and RegisterFiles
    {%- for child_node in node.children(unroll=False) %}
        {%- if not hide_node_func(child_node) %}
            {%- if isinstance(child_node, systemrdlRegNode) or isinstance(child_node, systemrdlRegfileNode) %}
    @property
                {%- if isinstance(child_node, systemrdlRegNode) -%}
                {%- set property_name = safe_node_name(child_node) -%}
                {%- elif isinstance(child_node, systemrdlRegfileNode) -%}
                {%- set property_name = safe_node_name(child_node) -%}
                {% else %}
                {{ raise_template_error('unexpected type') }}
                 {%- endif %}
    def {{property_name}}(self) -> {% if child_node.is_array -%}{{get_fully_qualified_type_name(child_node)}}_array_cls{% else %}{{get_fully_qualified_type_name(child_node)}}_cls{%- endif -%}:
        """
        Property to access {{child_node.inst_name}} {% if child_node.is_array -%}array{% endif %}

        {{get_table_block(child_node) | indent(8)}}
        """
        return self.__{{child_node.inst_name}}
            {%- endif %}
        {%- endif %}
    {% endfor %}

    @property
    def systemrdl_python_child_name_map(self) -> dict[str, str]:
        """
        In some cases systemRDL names need to be converted make them python safe, this dictionary
        is used to map the original systemRDL names to the names of the python attributes of this
        class

        Returns: dictionary whose key is the systemRDL names and value it the property name
        """
        return {
            {%- for child_node in node.children(unroll=False) -%}
                {%- if not hide_node_func(child_node) %}
                    {%- if isinstance(child_node, systemrdlRegNode) -%}
            '{{child_node.inst_name}}':'{{safe_node_name(child_node)}}',
                    {%- elif isinstance(child_node, systemrdlRegfileNode) -%}
            '{{child_node.inst_name}}':'{{safe_node_name(child_node)}}',
                    {%- elif isinstance(child_node, systemrdlSignalNode) %}
            # doing nothing with signal node: {{child_node.inst_name}}
                    {% else %}
            {{ raise_template_error('unexpected type') }}
                    {%- endif %}
                {%- endif %}
            {%- endfor %}
            }

    {{ udp_property(node) }}

    {{ universal_properties(node) }}

    {{ child_register_getter(node) }}

        {% if asyncoutput %}
    {{ child_getter(node, "get_sections", "AsyncRegFile, AsyncRegFileArray", systemrdlRegfileNode) }}
    {% else %}
    {{ child_getter(node, "get_sections", "RegFile, RegFileArray", systemrdlRegfileNode) }}
    {% endif %}

     {%- if node.is_array %}
class {{get_fully_qualified_type_name(node)}}_array_cls({% if asyncoutput %}Async{% endif %}RegFileArray):
    """
    Class to represent a regfile array in the register model
    """
    __slots__: list[str] = []

    def __init__(self, logger_handle: str, inst_name: str,
                 parent: Union[{% if asyncoutput %}Async{% endif %}AddressMap, {% if asyncoutput %}Async{% endif %}RegFile],
                 address: int,
                 stride: int,
                 dimensions: tuple[int, ...]):

        super().__init__(logger_handle=logger_handle, inst_name=inst_name,
                         parent=parent, address=address,
                         stride=stride, dimensions=dimensions)

    @property
    def _element_datatype(self) -> Type[Node]:
        return {{get_fully_qualified_type_name(node)}}_cls
    {%- endif %}
{%- endmacro %}

{%- macro addrmap_class(node) %}
class {{get_fully_qualified_type_name(node)}}_cls({% if asyncoutput %}Async{% endif %}AddressMap):
    """
    Class to represent a address map in the register model

    {{get_table_block(node) | indent}}
    """

    __slots__ : list[str] = [{%- for child_node in node.children(unroll=False) -%}{%- if isinstance(child_node, systemrdlRegNode) or isinstance(child_node, systemrdlRegfileNode) or isinstance(child_node, systemrdlAddrmapNode) or isinstance(child_node, systemrdlMemNode) -%}'__{{child_node.inst_name}}'{% if not loop.last %}, {% endif %}{% endif %}{%- endfor %}]

    def __init__(self, *,
                 address:int {%- if node == top_node -%}={{top_node.absolute_address}}{%- endif -%},
                 logger_handle:str {%- if node == top_node -%}='reg_model.{{top_node.get_path()}}'{%- endif -%},
                 inst_name:str{%- if node == top_node -%}='{{node.inst_name}}'{%- endif -%},
                 callbacks: Optional[Union[{% if asyncoutput %}Async{% else %}Normal{% endif %}CallbackSet, {% if asyncoutput %}Async{% else %}Normal{% endif %}CallbackSetLegacy]]=None,
                 parent:Optional[{% if asyncoutput %}Async{% endif %}AddressMap]=None):

        if callbacks is not None:
            if not isinstance(callbacks, ({% if asyncoutput %}Async{% else %}Normal{% endif %}CallbackSet, {% if asyncoutput %}Async{% else %}Normal{% endif %}CallbackSetLegacy)):
                raise TypeError(f'callbacks should be {% if asyncoutput %}Async{% else %}Normal{% endif %}CallbackSet, {% if asyncoutput %}Async{% else %}Normal{% endif %}CallbackSetLegacy got {type(callbacks)}')

        super().__init__(callbacks=callbacks,
                         address=address,
                         logger_handle=logger_handle,
                         inst_name=inst_name,
                         parent=parent)

        {% for child_node in node.children(unroll=False) -%}
            {{ regfile_or_addr_instance(child_node) | indent }}
        {% endfor %}

    @property
    def size(self) -> int:
        return {{node.size}}

        {%- for child_node in node.children(unroll=False) -%}
            {%- if isinstance(child_node, systemrdlRegNode) or isinstance(child_node, systemrdlRegfileNode) or isinstance(child_node, systemrdlAddrmapNode) or isinstance(child_node, systemrdlMemNode) %}
                {%- if not hide_node_func(child_node) %}
    @property
    {%- if isinstance(child_node, systemrdlRegNode) -%}
    {%- set property_name = safe_node_name(child_node) -%}
    {%- elif isinstance(child_node, systemrdlRegfileNode) -%}
    {%- set property_name = safe_node_name(child_node) -%}
    {%- elif isinstance(child_node, systemrdlAddrmapNode) -%}
    {%- set property_name = safe_node_name(child_node) -%}
    {%- elif isinstance(child_node, systemrdlMemNode) %}
    {%- set property_name = safe_node_name(child_node) -%}
    {% else %}
    {{ raise_template_error('unexpected type') }}
    {%- endif %}
    def {{property_name}}(self) -> {% if child_node.is_array -%}{{get_fully_qualified_type_name(child_node)}}_array_cls{% else %}{{get_fully_qualified_type_name(child_node)}}_cls{%- endif -%}:
        """
        Property to access {{child_node.inst_name}} {% if child_node.is_array -%}array{% endif %}

        {{get_table_block(child_node) | indent(8)}}
        """
        return self.__{{child_node.inst_name}}
                {%- endif %}
            {%- endif %}
        {% endfor %}

    @property
    def systemrdl_python_child_name_map(self) -> dict[str, str]:
        """
        In some cases systemRDL names need to be converted make them python safe, this dictionary
        is used to map the original systemRDL names to the names of the python attributes of this
        class

        Returns: dictionary whose key is the systemRDL names and value it the property name
        """
        return {
            {%- for child_node in node.children(unroll=False) -%}
                {%- if not hide_node_func(child_node) %}
                    {%- if isinstance(child_node, systemrdlRegNode) -%}
            '{{child_node.inst_name}}':'{{safe_node_name(child_node)}}',
                    {%- elif isinstance(child_node, systemrdlRegfileNode) -%}
            '{{child_node.inst_name}}':'{{safe_node_name(child_node)}}',
                    {%- elif isinstance(child_node, systemrdlAddrmapNode) -%}
            '{{child_node.inst_name}}':'{{safe_node_name(child_node)}}',
                    {%- elif isinstance(child_node, systemrdlMemNode) %}
            '{{child_node.inst_name}}':'{{safe_node_name(child_node)}}',
                    {%- elif isinstance(child_node, systemrdlSignalNode) %}
            # doing nothing with signal node: {{child_node.inst_name}}
                    {% else %}
            {{ raise_template_error('unexpected type') }}
                    {%- endif %}
                {%- endif %}
            {%- endfor %}
            }

    {{ udp_property(node) }}

    {{ universal_properties(node) }}

    {{ child_register_getter(node) }}
    {% if asyncoutput %}
    {{ child_getter(node, "get_sections", "AsyncAddressMap, AsyncRegFile, AsyncAddressMapArray, AsyncRegFileArray", (systemrdlAddrmapNode, systemrdlRegfileNode)) }}
    {{ child_getter(node, "get_memories",    "AsyncMemory, AsyncMemoryArray",     systemrdlMemNode) }}
    {% else %}
    {{ child_getter(node, "get_sections", "AddressMap, RegFile, AddressMapArray, RegFileArray", (systemrdlAddrmapNode, systemrdlRegfileNode)) }}
    {{ child_getter(node, "get_memories",    "Memory, MemoryArray",     systemrdlMemNode) }}

    {% endif %}

    {%- if node.is_array %}
class {{get_fully_qualified_type_name(node)}}_array_cls({% if asyncoutput %}Async{% endif %}AddressMapArray):
    """
    Class to represent a addrmap array in the register model
    """
    __slots__: list[str] = []

    def __init__(self, logger_handle: str, inst_name: str,
                 parent: {% if asyncoutput %}Async{% endif %}AddressMap,
                 address: int,
                 stride: int,
                 dimensions: tuple[int, ...]):

        super().__init__(logger_handle=logger_handle, inst_name=inst_name,
                         parent=parent, address=address,
                         stride=stride, dimensions=dimensions)

    @property
    def _element_datatype(self) -> Type[Node]:
        return {{get_fully_qualified_type_name(node)}}_cls
    {%- endif %}
{%- endmacro %}

{%- macro child_getter(node, getter_name, child_type, child_rdltype) %}
    def {{getter_name}}(self, unroll:bool=False) -> Iterator[Union[{{child_type}}]]:
        """
        generator that produces all the {{child_type}} children of this node
        """
        {% for child_node in node.children(unroll=False) -%}
            {%- if isinstance(child_node, child_rdltype) %}
                {%- if not hide_node_func(child_node) %}

                    {%- if isinstance(child_node, systemrdlRegNode) -%}
                    {%- set property_name = safe_node_name(child_node) -%}
                    {%- elif isinstance(child_node, systemrdlRegfileNode) -%}
                    {%- set property_name = safe_node_name(child_node) -%}
                    {%- elif isinstance(child_node, systemrdlAddrmapNode) -%}
                    {%- set property_name = safe_node_name(child_node) -%}
                    {%- elif isinstance(child_node, systemrdlMemNode) %}
                    {%- set property_name = safe_node_name(child_node) -%}
                    {% else %}
                    {{ raise_template_error('unexpected type') }}
                    {%- endif %}


                    {% if child_node.is_array %}
        if unroll:
            for child in self.{{property_name}}:
                yield child
        else:
            yield self.{{property_name}}
                    {% else %}
        yield self.{{property_name}}
                    {%- endif %}
                {%- endif -%}
            {%- endif -%}
        {% endfor %}

        # Empty generator in case there are no children of this type
        if False: yield
{%- endmacro %}


{% for property_enum in dependent_property_enum %}
@unique
class {{property_enum.type_name}}_property_enumcls({% if legacy_enum_type %}IntEnum{% else %}SystemRDLEnum{% endif %}):
    {% for value_of_enum_needed in property_enum -%}
    {{ value_of_enum_needed.name.upper() }} = {% if legacy_enum_type %}{{ value_of_enum_needed.value }}{% else %}SystemRDLEnumEntry(int_value={{value_of_enum_needed.value}}, name={%- if value_of_enum_needed.rdl_name is not none -%}'{{value_of_enum_needed.rdl_name}}'{% else %}None{% endif %}, desc={%- if value_of_enum_needed.rdl_desc is not none -%}'{{value_of_enum_needed.rdl_desc}}'{% else %}None{% endif %}){% endif %}  {%- if value_of_enum_needed.rdl_desc is not none -%}# {{ value_of_enum_needed.rdl_desc }} {%- endif %}
    {% endfor %}
{% endfor %}

{% if uses_enum %}
# root level enum definitions
{%- for enum_needed, owning_field in get_dependent_enum(top_node.parent, hide_node_func) %}
@unique
class {{get_fully_qualified_enum_type(enum_needed, top_node.parent, owning_field, hide_node_func)}}_enumcls({% if legacy_enum_type %}IntEnum{% else %}SystemRDLEnum{% endif %}):

    {% for value_of_enum_needed in enum_needed -%}
    {{ value_of_enum_needed.name.upper() }} = {% if legacy_enum_type %}{{ value_of_enum_needed.value }}{% else %}SystemRDLEnumEntry(int_value={{value_of_enum_needed.value}}, name={%- if value_of_enum_needed.rdl_name is not none -%}'{{value_of_enum_needed.rdl_name}}'{% else %}None{% endif %}, desc={%- if value_of_enum_needed.rdl_desc is not none -%}'{{value_of_enum_needed.rdl_desc}}'{% else %}None{% endif %}){% endif %}  {%- if value_of_enum_needed.rdl_desc is not none -%}# {{ value_of_enum_needed.rdl_desc }} {%- endif %}
    {% endfor %}
{% endfor -%}
{% endif %}


# regfile, register and field definitions
{%- for node in get_dependent_component(top_node.parent, hide_node_func) -%}
{# the get_dependent_component already strips out hidden items so there is no need to check here
   for hidden items #}
    {% if isinstance(node, systemrdlRegNode) %}
    {{ register_class(node)  }}
    {% elif isinstance(node, systemrdlRegfileNode) %}
    {{ regfile_class(node) }}
    {% elif isinstance(node, systemrdlAddrmapNode) %}
    {{ addrmap_class(node) }}
    {% elif isinstance(node, systemrdlFieldNode) %}
    {{ field_class(node)  }}
    {% elif isinstance(node, systemrdlMemNode) %}
    {{ memory_class(node)  }}
    {% endif %}
{% endfor %}


if __name__ == '__main__':
    # dummy functions to demonstrate the class
    {% if asyncoutput %}async {% endif %}def read_addr_space(addr: int, width: int, accesswidth: int) -> int:
        """
        Callback to simulate the operation of the package, everytime the read is called, it will
        request the user input the value to be read back.

        Args:
            addr: Address to write to
            width: Width of the register in bits
            accesswidth: Minimum access width of the register in bits

        Returns:
            value inputted by the used
        """
        assert isinstance(addr, int)
        assert isinstance(width, int)
        assert isinstance(accesswidth, int)
        return int(input('value to read from address:0x%X'%addr))

    {% if asyncoutput %}async {% endif %}def write_addr_space(addr: int, width: int, accesswidth: int, data: int) -> None:
        """
        Callback to simulate the operation of the package, everytime the read is called, it will
        request the user input the value to be read back.

        Args:
            addr: Address to write to
            width: Width of the register in bits
            accesswidth: Minimum access width of the register in bits
            data: value to be written to the register

        Returns:
            None
        """
        assert isinstance(addr, int)
        assert isinstance(width, int)
        assert isinstance(accesswidth, int)
        assert isinstance(data, int)
        print('write data:0x%X to address:0x%X'%(data, addr))

    # create an instance of the class
    {{top_node.inst_name}} = {{get_fully_qualified_type_name(top_node)}}_cls(callbacks = {% if asyncoutput %}AsyncCallbackSet{% else %}NormalCallbackSet{% endif %}{% if legacy_block_access %}Legacy{% endif %}(read_callback=read_addr_space,
                                                                                                     write_callback=write_addr_space))
