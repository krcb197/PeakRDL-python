{#
peakrdl-python is a tool to generate Python Register Access Layer (RAL) from SystemRDL
Copyright (C) 2021 - 2025

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
#}

{% include "header.py.jinja" with context %}

{% from 'template_ultilities.py.jinja' import peakrdl_python_sim_lib with context %}
{# the following defining the number relative steps up to the lib and sim_lib packages from the current file #}
{% set lib_depth = 1 %}

from typing import Union

from {{ peakrdl_python_sim_lib(depth=lib_depth) }}.register import Register, MemoryRegister
from {{ peakrdl_python_sim_lib(depth=lib_depth) }}.memory import Memory
from {{ peakrdl_python_sim_lib(depth=lib_depth) }}.simulator import MemoryEntry
from {{ peakrdl_python_sim_lib(depth=lib_depth) }}.field import FieldDefinition
{% if asyncoutput -%}
from {{ peakrdl_python_sim_lib(depth=lib_depth) }}.simulator import AsyncSimulator{% if legacy_block_access %}Legacy{% endif %} as Simulator{% if legacy_block_access %}Legacy{% endif %}
{% else %}
from {{ peakrdl_python_sim_lib(depth=lib_depth) }}.simulator import Simulator{% if legacy_block_access %}Legacy{% endif %}
{%- endif %}

{%- macro single_reg_entry(node) %}
    {% if isinstance(node.parent, systemrdlMemNode) %}MemoryRegister(memory=self.memory_for_address_with_exception({{node.absolute_address}}).memory,memory_address_offset={{node.address_offset}},{% else %}Register({% endif %}width={{node.size*8}}, full_inst_name='{{'.'.join(node.get_path_segments())}}', readable={{node.has_sw_readable}}, writable={{node.has_sw_writable}},
                                         fields=[

                                                {%- for field in node.fields() -%}
                                                FieldDefinition(high={{field.high}}, low={{field.low}}, msb={{field.msb}}, lsb={{field.lsb}}, inst_name='{{field.inst_name}}'),
                                                {%- endfor %}
                                                ])
{%- endmacro %}

class {{top_node.inst_name}}_simulator_cls(Simulator{% if legacy_block_access %}Legacy{% endif %}):

    def _build_registers(self) -> dict[int, Union[list[Union[MemoryRegister, Register]], Union[MemoryRegister, Register]]]:
        return {
        {%- for addr, addr_entry in reg_dict.items() -%}
            {% if isinstance(addr_entry, list) %}
            {{addr}} : [{% for node in addr_entry %}{{single_reg_entry(node)}},{% endfor %}],
            {% else %}
            {{addr}} : {{single_reg_entry(addr_entry)}},
            {%- endif %}
        {%- endfor %}
        }

    def _build_memories(self) -> list[MemoryEntry]:
        return [
        {%- for node in top_node.descendants(unroll=True) -%}
            {% if isinstance(node, systemrdlMemNode) %}
            MemoryEntry(start_address={{node.absolute_address}},
                        end_address={{node.absolute_address+node.size-1}},
                        memory=Memory(width={{node.get_property('memwidth')}},
                                      length={{node.get_property('mementries')}},
                                      full_inst_name='{{'.'.join(node.get_path_segments())}}',
                                      default_value=0)),
            {%- endif %}
        {%- endfor %}
        ]

if __name__ == '__main__':
    pass

