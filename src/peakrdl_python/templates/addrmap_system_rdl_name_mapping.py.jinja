peakrdl-python is a tool to generate Python Register Access Layer (RAL) from SystemRDL
Copyright (C) 2021 - 2023

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
#}

{%- macro get_child_by_system_rdl_name(node) %}
    {# the behaviour of this method needs to change depending on whether there are 0, 1 or >2 children #}
    {# >2 needs multiple overload #}
    {# 1 the method has a single return type #}
    {# 0 always returns an error #}
    {% if visible_nonsignal_node(node) == 0 %}
    def get_child_by_system_rdl_name(self, name: Any) -> NoReturn:
        raise KeyError('This node has no children')
    {% elif visible_nonsignal_node(node) == 1 %}
        {%- for child_node in node.children(unroll=False) -%}
            {%- if not isinstance(child_node, systemrdlSignalNode) %}
                {% if not hide_node_func(child_node) %}
    def get_child_by_system_rdl_name(self, name: Any) -> {{get_fully_qualified_type_name(child_node)}}_cls:
        return super().get_child_by_system_rdl_name(name)
                {% endif %}
            {%- endif %}
        {%- endfor %}
    {% else %}
    # nodes:{{ visible_nonsignal_node(node) }}
        {%- for child_node in node.children(unroll=False) -%}
            {%- if not isinstance(child_node, systemrdlSignalNode) %}
                {% if not hide_node_func(child_node) %}
    @overload
    def get_child_by_system_rdl_name(self, name: Literal["{{child_node.inst_name}}"]) -> {{get_fully_qualified_type_name(child_node)}}_cls: ...
                {% endif %}
            {%- endif %}
        {%- endfor %}

    @overload
    def get_child_by_system_rdl_name(self, name: str) -> Union[{%- for child_node in node.children(unroll=False) -%}{%- if not isinstance(child_node, systemrdlSignalNode) %}{% if not hide_node_func(child_node) %}{{get_fully_qualified_type_name(child_node)}}_cls, {% endif %}{%- endif %}{%- endfor %}]: ...

    def get_child_by_system_rdl_name(self, name: Any) -> Any:
        return super().get_child_by_system_rdl_name(name)
    {% endif %}
{% endmacro %}

{%- macro systemrdl_python_child_name_map(node) %}
    @property
    def systemrdl_python_child_name_map(self) -> dict[str, str]:
        """
        In some cases systemRDL names need to be converted make them python safe, this dictionary
        is used to map the original systemRDL names to the names of the python attributes of this
        class

        Returns: dictionary whose key is the systemRDL names and value it the property name
        """
        return {
            {%- for child_node in node.children(unroll=False) -%}
                {%- if not hide_node_func(child_node) %}
                    {%- if not isinstance(child_node, systemrdlSignalNode) -%}
            '{{child_node.inst_name}}':'{{safe_node_name(child_node)}}',
                    {%- endif %}
                {%- endif %}
            {%- endfor %}
            }
{%- endmacro %}